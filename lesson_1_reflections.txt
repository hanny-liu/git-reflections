0.版本控制系统是指任何允许系统性地保存内容版本的系统,可以轻松第创建\提交\访问同一文档,代码,菜单或任何其他内容的不同版本
1.git是文件版本控制的工具,可以保存各个时间段的文件版本,避免你修改了旧版本后,没办法撤回,而无法回到新版本去.
2.diff是自动查找两个文本文件的工具,一般与-u搭配在一起,u表示标准区别格式,使输出的内容更容易阅读.
	需要注意的是,对比的文件最好使用短行.如果文件包含很长的行，则会降低许多命令行工具（包括 Git）的实用性。 例如，如果使用 diff 比较两个将所有内容都放在同一行上的文件，则 diff 只会显示这两个文件是不同的文件，而无法指出哪里不同。
3.查看文件的两个版本之间的差异如何帮助你了解引入的错误？
解答:在linux下,若两个版本有差异,它将会用不同的符号表示相同行内不同的内容,同时显示行号.
4.从长远来看，能轻松访问文件的整个历史记录将如何提高编程者的效率？
解答:能够找到在不同时期下,实现的不同功能的文件,而无需靠重命名来保存文件,管理文件很方便.
5.在git中,将这些用户创建的检查点称为commit,每个提交代表一个时间点的内容版本,git需要用户在每次创建提交时
提供提交消息.
6.如果一直使用git保存记录,可以使用git log命令来查看之前commit文件的记录,包含commit ID ,作者,提交时间和内容
7.git diff 可以查看文件commit的两个版本之间的差别
8.什么是 README 文档？
许多项目都包含一个名为“README”的文件，该文件概述了项目的用途和使用方法。在使用项目做任何事情之前，通常最好先阅读该文件，因此，该文件被命名为此名称，以便用户更有可能阅读它。
9.你认为，手动选择何时创建提交（像在 Git 中做的那样）与自动保存版本（如 Google Docs 所做的那样）各有何优缺点？
我认为手动提交的用户有可能会忘记提交,以至于若系统出现故障文件直接消失.自动保存的版本就会避免这样的问题,但是同样会出现其他问题在于自动保存版本又会使得保存太频繁,每两个版本直接的差异性太小,操作又显得比较多余;另外,在从事某个项目时,通常需要多个同时跟踪的文件.git将这些文件的集合称为仓库.如果每当你更改某一个文件,并提交时,都将保存仓库中每个文件的版本.
10.何你认为一些版本控制系统（例如 Git）允许在一次提交中保存多个文件，而其他系统（例如 Google Docs）单独对待每个文件？
11.git 使用git clone允许你将一个仓库从一个电脑拷贝到自己的电脑

12.git config命令是更改git中的设置
   git config --global表示将应用到所有的Git项目,不仅仅是当前项目

13.获得彩色输出
要获得彩色的 diff 输出，请运行 git config --global color.ui auto
14.如何使用命令 git log 和 git diff 来查看文件的历史记录？
到你指定的git仓库下,打开终端输入git log就会显示你提交的记录,然后如果想对比某两个版本的差异,就在git diff 后面输入两个版本的commit ID就可以显示.
15.Git 错误和警告解决方案
(1)Should not be doing an octopus（不应执行 octopus）
Octopus 是 Git 用来合并多个不同代码版本的一种策略。如果在不合适的情况下尝试使用该策略，则可能会出现此消息。
(2)You are in 'detached HEAD' state（你处于“分离的 HEAD”状态）
Git 将你目前所在的提交称为 HEAD。可通过切换到前一个提交来“分离”HEAD，这在下一个视频中有说明。虽然此警告听起来不太好，但分离 HEAD 实际上不是坏事。Git 只是向你发出警告，以便你知道自己正在这样做。
(3)Panic! (the 'impossible' happened)（（天哪！“不可能的事”发生了））
这是真正的错误消息，但它不是由 Git 输出的，而是由 GHC（编程语言 Haskell 的编译器）输出的。它仅在发生特别让人惊讶的错误时才会出现！

16.将临时文件转回到任何commit时的状态->git checkout,即当之前提交的版本转回到当前commit的版本.,这样可以看到之前提交版本的代码.
17.使用版本控制，如何让你更有信心进行有可能会造成破坏的更改？
先保存当前commit后的id,然后再将之前commit的文件checkout出来.
18.创建git工作空间：








